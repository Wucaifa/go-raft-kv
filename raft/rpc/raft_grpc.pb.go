// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: raft.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RaftRpc_RequestVote_FullMethodName     = "/rpc.RaftRpc/RequestVote"
	RaftRpc_AppendEntries_FullMethodName   = "/rpc.RaftRpc/AppendEntries"
	RaftRpc_InstallSnapshot_FullMethodName = "/rpc.RaftRpc/InstallSnapshot"
)

// RaftRpcClient is the client API for RaftRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftRpcClient interface {
	// RequestVote —— Raft 共识算法中候选人向其他节点请求投票的 RPC 方法。
	// 接收者需实现：
	// 1. 如果 term < currentTerm，返回 false。
	// 2. 如果 votedFor 为空或者为请求中的 candidateId，并且候选人的日志至少和自己一样新，则投票给它。
	// 3. 返回的响应中包含当前的 term（用于更新候选人的 term）以及是否投票的结果。
	RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResp, error)
	AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResp, error)
	InstallSnapshot(ctx context.Context, in *InstallSnapshotReq, opts ...grpc.CallOption) (*InstallSnapshotResp, error)
}

type raftRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftRpcClient(cc grpc.ClientConnInterface) RaftRpcClient {
	return &raftRpcClient{cc}
}

func (c *raftRpcClient) RequestVote(ctx context.Context, in *RequestVoteReq, opts ...grpc.CallOption) (*RequestVoteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVoteResp)
	err := c.cc.Invoke(ctx, RaftRpc_RequestVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRpcClient) AppendEntries(ctx context.Context, in *AppendEntriesReq, opts ...grpc.CallOption) (*AppendEntriesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendEntriesResp)
	err := c.cc.Invoke(ctx, RaftRpc_AppendEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftRpcClient) InstallSnapshot(ctx context.Context, in *InstallSnapshotReq, opts ...grpc.CallOption) (*InstallSnapshotResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallSnapshotResp)
	err := c.cc.Invoke(ctx, RaftRpc_InstallSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftRpcServer is the server API for RaftRpc service.
// All implementations must embed UnimplementedRaftRpcServer
// for forward compatibility.
type RaftRpcServer interface {
	// RequestVote —— Raft 共识算法中候选人向其他节点请求投票的 RPC 方法。
	// 接收者需实现：
	// 1. 如果 term < currentTerm，返回 false。
	// 2. 如果 votedFor 为空或者为请求中的 candidateId，并且候选人的日志至少和自己一样新，则投票给它。
	// 3. 返回的响应中包含当前的 term（用于更新候选人的 term）以及是否投票的结果。
	RequestVote(context.Context, *RequestVoteReq) (*RequestVoteResp, error)
	AppendEntries(context.Context, *AppendEntriesReq) (*AppendEntriesResp, error)
	InstallSnapshot(context.Context, *InstallSnapshotReq) (*InstallSnapshotResp, error)
	mustEmbedUnimplementedRaftRpcServer()
}

// UnimplementedRaftRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRaftRpcServer struct{}

func (UnimplementedRaftRpcServer) RequestVote(context.Context, *RequestVoteReq) (*RequestVoteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRaftRpcServer) AppendEntries(context.Context, *AppendEntriesReq) (*AppendEntriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRaftRpcServer) InstallSnapshot(context.Context, *InstallSnapshotReq) (*InstallSnapshotResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallSnapshot not implemented")
}
func (UnimplementedRaftRpcServer) mustEmbedUnimplementedRaftRpcServer() {}
func (UnimplementedRaftRpcServer) testEmbeddedByValue()                 {}

// UnsafeRaftRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftRpcServer will
// result in compilation errors.
type UnsafeRaftRpcServer interface {
	mustEmbedUnimplementedRaftRpcServer()
}

func RegisterRaftRpcServer(s grpc.ServiceRegistrar, srv RaftRpcServer) {
	// If the following call pancis, it indicates UnimplementedRaftRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RaftRpc_ServiceDesc, srv)
}

func _RaftRpc_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRpcServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftRpc_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRpcServer).RequestVote(ctx, req.(*RequestVoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRpc_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRpcServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftRpc_AppendEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRpcServer).AppendEntries(ctx, req.(*AppendEntriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftRpc_InstallSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSnapshotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftRpcServer).InstallSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftRpc_InstallSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftRpcServer).InstallSnapshot(ctx, req.(*InstallSnapshotReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftRpc_ServiceDesc is the grpc.ServiceDesc for RaftRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RaftRpc",
	HandlerType: (*RaftRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _RaftRpc_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _RaftRpc_AppendEntries_Handler,
		},
		{
			MethodName: "InstallSnapshot",
			Handler:    _RaftRpc_InstallSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
